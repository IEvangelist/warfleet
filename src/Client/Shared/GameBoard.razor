@{
    var size = Size switch
    {
        BoardSize.FiveByFive => "5",
        BoardSize.TwentyByTwenty => "20",
        _ => "10"
    };

    var shipOccupancies =
            Ships?.Select(ship => (Ship: ship, Occupancy: ship.GetShipOccupancy()))
                 .ToDictionary(t => t.Ship, t => t.Occupancy);
}

<div class="game-board game-board-@size @($"{(IsDisabled ? "disabled" : "")}")"
     ondragover="event.preventDefault();"
     disabled="@IsDisabled"
     @ondrop="@OnDrop">
    @foreach (var cell in Size.ToPositionSet())
    {
        <div class="@cell.ToString()"
             @ondragenter="@(args => OnDragEnter(args, cell))"
             @ondragleave="@(args => OnDragLeave(args, cell))">
            <svg @onclick="@(_ => CallShot(cell))">
                @if (shipOccupancies is { Count: > 0 })
                {
                    var (ship, occupancy) =
                        shipOccupancies.FirstOrDefault(kvp => kvp.Value.Contains(cell));
                    if (ship is not null)
                    {
                        <ShipPlacement Ship="ship" Cell="cell" />
                    }
                }
                @{
                    if (IsTrackingBoard)
                    {
                        var shot = ActiveGame.ShotsFired.FirstOrDefault(shot => shot.Shot == cell);
                        if (shot is not null)
                        {
                        <Shot Result="@(shot.IsHit ? ShotResult.Hit : ShotResult.Miss)" />
                            }
                        }
                    }
            </svg>
        </div>
    }
</div>

@code {
    [CascadingParameter]
    ActiveGame ActiveGame { get; set; } = null!;

    [Parameter]
    public BoardSize Size { get; set; }

    [Parameter]
    public HashSet<Ship> Ships { get; set; } = null!;

    [Parameter]
    public bool IsTrackingBoard { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public EventCallback<Ship> ShipPlaced { get; set; }

    [Parameter]
    public EventCallback<Position> ShotCalled { get; set; }

    async Task OnDrop(DragEventArgs drag)
    {
        var placedShip = ActiveGame.DraggingShip with
        {
            TopLeftPosition = ActiveGame.DraggingShipPosition
        };

        if ((Ships ??= new()).Add(placedShip))
        {
            await ShipPlaced.InvokeAsync(placedShip);
        }
    }

    void OnDragEnter(DragEventArgs drag, Position cell)
    {
        ActiveGame.DraggingShipPosition = cell;
    }

    void OnDragLeave(DragEventArgs drag, Position cell)
    {
    }

    async Task CallShot(Position cell)
    {
        if (IsTrackingBoard)
        {
            await ShotCalled.InvokeAsync(cell);
        }
    }
}
